import java.util.*;

public class Solution {
	public ListNode reverseBetween(ListNode head, int m, int n) {
		if (m == n)
			return head;

		ListNode pre_node_m, next_node_n;
		ListNode neoHead, neoTail, current, next;
		if (m == 1) {
			next_node_n = getNode(head, n + 1);
			neoTail = neoHead = null;
			current = head;
			for (int i = m; i <= n; i++) {
				next = current.next;
				if (neoHead == null) {
					neoHead = neoTail = current;
					current.next = null;
				} else {
					current.next = neoHead;
					neoHead = current;
				}
				current = next;
			}
			head = neoHead;
			neoTail.next = next_node_n;
		} else {
			pre_node_m = getNode(head, m - 1);
			next_node_n = getNode(head, n + 1);

			current = pre_node_m.next;
			neoTail = neoHead = null;
			for (int i = m; i <= n; i++) {
				next = current.next;
				if (neoHead == null) {
					neoHead = neoTail = current;
					current.next = null;
				} else {
					current.next = neoHead;
					neoHead = current;
				}
				current = next;
			}

			pre_node_m.next = neoHead;
			neoTail.next = next_node_n;
		}

		return head;
	}

	ListNode getNode(ListNode head, int n) {
		ListNode temp = head;
		n--;
		while (n > 0) {
			temp = temp.next;
			n--;
		}
		return temp;
	}
}
