import java.io.*;
import java.math.BigInteger;
import java.util.*;

public class p1426___BFS___打表 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(
			System.in));
	static StreamTokenizer in = new StreamTokenizer(br);
	static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

	static int n;
	static BigInteger big;
	static LinkedList<BigInteger> list = new LinkedList<BigInteger>();

	static long ans[] = { 1l, 10l, 111l, 1100l, 100l, 11010l, 11011l, 11000l,
			111111111l, 1000000l, 1000010l, 1001100l, 1010100l, 1011010l,
			1100010l, 1110000l, 1110100l, 10111111110l, 100111l, 101000l,
			101010l, 110000l, 110101l, 111000l, 111100l, 11001000010l,
			11010111111l, 11011000000l, 11011000111l, 11011001010l,
			11011001011l, 11011100000l, 11011100001l, 11011101110l,
			11011110110l, 110111111100l, 111000000000l, 111000010010l,
			111001000110l, 111001001000l, 111001010110l, 111010011000l,
			111101111110l, 111110000100l, 111110011110l, 1001111110l,
			1010001001l, 1010010000l, 1010010001l, 1010010100l, 1010111100l,
			1011101000l, 1100000001l, 11011111110l, 11100000010l, 11100110000l,
			11110001100l, 11110100100l, 11111100011l, 11111111100l,
			1000101100l, 1010011000l, 1111011111l, 1010000000000l,
			1010000000100l, 1010000101110l, 1010001101100l, 1010001110000l,
			1010011100001l, 1010011110010l, 1010110000110l, 1110111111000l,
			1111010000110l, 1111010100000l, 1111010111100l, 1111011111000l,
			1111100000010l, 1111101010110l, 1111101101100l, 1111101110000l,
			1111110001101l, 1111110111010l, 10010111001l, 10011101100l,
			10011110110l, 10100101010l, 10100111010l, 10110001000l,
			10111111110l, 11011111110l, 11011111111l, 11101111000l,
			11111010111l, 1000011010l, 1000101100l, 1001100000l, 1001101110l,
			1010110010l, 1101111111111111111l, 1000000l, 1000001l, 1000110l,
			1110000000010110110l, 1110000000011110000l, 1110000000011110110l,
			1110000001010000100l, 1110000001011001101l, 1110000001011101100l,
			1110000001110010101l, 1110000001110011000l, 1110000001110011100l,
			1110000010000000000l, 1110000010001000011l, 1110000010001101110l,
			1110000010010110110l, 1110000010011101100l, 1110000010011110010l,
			1110000010101000110l, 1110000010101100111l, 1110000010101111000l,
			1110000010110100010l, 1110000010111000110l, 1110000010111001100l,
			1110000010111111100l, 1110000011000000000l, 1110000011000011110l,
			1110000011000101110l, 1110000011010000000l, 1110000011101001001l,
			1110000011101111000l, 1110000011110111100l, 1110000100000001100l,
			1110000100000111110l, 1110000100111100000l, 1110000100111100010l,
			1110000101001100000l, 1110000101100000111l, 1110000101110100100l,
			1110000101110100101l, 1110000101110110000l, 1110000110001100101l,
			1110000111000100100l, 1110000111110000110l, 1110000111110010000l,
			1110000111111011010l, 1110001000000010110l, 1110001000010110110l,
			1110001000010111100l, 1110001000011010010l, 1110001000011011100l,
			1110001000011100010l, 1110001000101101000l, 1110001000101101001l,
			1110001001000001110l, 1110001001001001100l, 1110001001011110000l,
			1110001010010000110l, 1110001010011010100l, 1110001010101010001l,
			1110001010101100000l, 1110001011010110100l, 1110001011011001000l,
			1110001011101010101l, 1110001011101110000l, 1110001011110101110l,
			1110001100000111000l, 1110001100100001001l, 1110001100101110000l,
			1110001101001001001l, 1110001101001110000l, 1110001101010000110l,
			1110001101111101000l, 1110001101111110010l, 1110001110011000100l,
			1110001110011010000l, 1110001111000100000l, 1110001111010110011l,
			1110010001011110100l, 1110010010110111011l, 1110010010111000100l,
			1110010011001101001l, 1110010011010000100l, 1110010011011010000l,
			1110010011011110000l, 1110010011100001100l, 1110010011111011100l,
			1110010100000110001l, 1110010101001111000l, 1110010110000101100l,
			1110010110000110100l, 1110010110010010001l, 1110010110111000000l,
			1110011000000010110l, 1110011000001000010l, 1110011000001111000l,
			1110011000010010000l, 1110011000100001001l };

	public static void main(String[] args) throws IOException {
		// 打表部分
		// for (int n = 1; n <= 200; n++) {
		// BigInteger temp;
		// BigInteger m = BigInteger.valueOf(n);
		// BigInteger ans = BigInteger.ONE;
		// list.add(BigInteger.ONE);
		//
		// while (!list.isEmpty()) {
		// temp = list.poll();
		// if (temp.mod(m).equals(BigInteger.ZERO)) {
		// ans = temp;
		// break;
		// }
		// list.add(temp.multiply(BigInteger.TEN));
		// list.add(temp.multiply(BigInteger.TEN).add(BigInteger.ONE));
		// }
		// out.print(ans + "l,");
		// }

		while (true) {
			n = nextInt();
			if (n == 0)
				break;
			if (n <= 197) {
				out.println(ans[n - 1]);
			} else if (n == 198)
				out.println("11110111111111111110");
			else if (n == 199)
				out.println("11111000000001101110");
			else if (n == 200)
				out.println("11111000000001110000");
		}

		out.flush();
		out.close();
	}

	static String next() throws IOException {
		in.nextToken();
		return in.sval;
	}

	static char nextChar() throws IOException {
		in.nextToken();
		return in.sval.charAt(0);
	}

	static int nextInt() throws IOException {
		in.nextToken();
		return (int) in.nval;
	}

	static long nextLong() throws IOException {
		in.nextToken();
		return (long) in.nval;
	}

	static float nextFloat() throws IOException {
		in.nextToken();
		return (float) in.nval;
	}

	static double nextDouble() throws IOException {
		in.nextToken();
		return in.nval;
	}
}