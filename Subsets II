import java.util.*;

public class Solution {
	List<List<Integer>> list = new ArrayList<List<Integer>>();
	int[] nums;
	int n;

	public List<List<Integer>> subsetsWithDup(int[] nums) {
		Arrays.sort(nums);
		this.nums = nums;
		this.n = nums.length;

		ArrayList<Integer> currentList = new ArrayList<Integer>();
		dfs(0, currentList);
		return list;
	}

	void dfs(int index, ArrayList<Integer> currentList) {
		if (index == n) {
			list.add(new ArrayList<Integer>(currentList));
			return;
		}

		int limit = index + 1;
		for (; limit < n; limit++)
			if (nums[limit] != nums[index])
				break;

		dfs(limit, currentList);
		for (int i = index; i < limit; i++) {
			currentList.add(nums[i]);
			dfs(limit, currentList);
		}
		for (int i = index; i < limit; i++)
			currentList.remove(currentList.size() - 1);
	}
}
