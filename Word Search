import java.util.*;

public class Solution {
	int[][] direction = new int[][] { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 } };
	boolean[][] vis;
	int n, m;
	String word;
	char[][] board;

	public boolean exist(char[][] board, String word) {
		this.board = board;
		this.word = word;
		m = board.length;
		n = board[0].length;
		vis = new boolean[m][n];
		for (int i = 0; i < m; i++)
			Arrays.fill(vis[i], false);
		for (int i = 0; i < m; i++)
			for (int j = 0; j < n; j++)
				if (dfs(i, j, 0))
					return true;
		return false;
	}

	boolean dfs(int i, int j, int index) {
		// 当前的index必须和word match
		if (word.charAt(index) != board[i][j])
			return false;
		// 不可以实现走过
		if (vis[i][j])
			return false;

		if (index + 1 == word.length())
			return true;

		vis[i][j] = true;
		int ti, tj;
		for (int d = 0; d < 4; d++) {
			ti = i + direction[d][0];
			tj = j + direction[d][1];
			if (valid(ti, tj) && dfs(ti, tj, index + 1))
				return true;
		}
		vis[i][j] = false;
		return false;
	}

	boolean valid(int i, int j) {
		if (i >= 0 && i < m && j >= 0 && j < n)
			return true;
		return false;
	}

	public static void main(String[] args) {
		Solution s = new Solution();
		System.out.println(s.exist(new char[][] { { 'a' } }, "a"));
	}
}
